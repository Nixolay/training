package companies

import (
	"testing"
)

// -------------- –ó–∞–¥–∞—á–∫–∞ –∏–∑ –±–∞–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¢-–ë–∞–Ω–∫–∞ --------------------
// üìå –ó–∞–¥–∞—á–∫–∞ –∏–∑ –±–∞–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¢-–ë–∞–Ω–∫–∞
// üìù –î–∞–Ω –º–∞—Å—Å–∏–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ä—è–¥ —Å–∏–¥–µ–Ω–∏–π, –≥–¥–µ seats[i] = 1 –æ–∑–Ω–∞—á–∞–µ—Ç,
//
//	—á—Ç–æ –Ω–∞ i-–º –º–µ—Å—Ç–µ —Å–∏–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫, –∞ seats[i] = 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ i-–µ –º–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0).
//
// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–æ–≥–æ.
// –ê–ª–µ–∫—Å —Ö–æ—á–µ—Ç —Å–µ—Å—Ç—å –Ω–∞ –º–µ—Å—Ç–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –Ω–µ–º—É —á–µ–ª–æ–≤–µ–∫–∞ –±—ã–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º.
// –í–µ—Ä–Ω–∏—Ç–µ —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
//
// –ü—Ä–∏–º–µ—Ä:
// –í—Ö–æ–¥: seats = [1,0,0,0,1,0,1]
// –í—ã—Ö–æ–¥:
//  2. (–ï—Å–ª–∏ –ê–ª–µ–∫—Å —Å—è–¥–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (—Ç.–µ. seats[2]), —Ç–æ –±–ª–∏–∂–∞–π—à–∏–π —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
//  2. –ï—Å–ª–∏ –æ–Ω —Å—è–¥–µ—Ç –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ, –±–ª–∏–∂–∞–π—à–∏–π —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
//  1. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Ä–∞–≤–Ω–æ 2)
//
// ‚è∞ O(n) ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ —Å hash-map.
// üíæ O(1) ‚Äî —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ hash-map.
// üîë –ò–¥–µ—è: –†–∞–∑–±–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –º–µ–∂–¥—É –∑–∞–Ω—è—Ç—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –∏ –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞–∂–¥–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ.
// üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ —Ç–∞–∫–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ.
func TestMaxDistToClosest(t *testing.T) {
	tests := []struct {
		name  string
		seats []int
		want  int
	}{
		{
			name:  "–ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–∞—á–∞–ª–µ",
			seats: []int{1, 0, 0, 0},
			want:  3,
		},
		{
			name:  "–ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–Ω—Ü–µ",
			seats: []int{0, 0, 0, 1},
			want:  3,
		},
		{
			name:  "–û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ",
			seats: []int{0, 0, 1, 0, 0},
			want:  2,
		},
		{
			name:  "–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1",
			seats: []int{1, 0, 0, 0, 1},
			want:  2,
		},
		{
			name:  "–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 2",
			seats: []int{1, 0, 0, 0, 0, 1},
			want:  2,
		},
		{
			name:  "–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞",
			seats: []int{1, 0, 0, 1, 0, 0, 1},
			want:  1,
		},
		{
			name:  "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞",
			seats: []int{0, 0, 0, 1, 0, 0},
			want:  3,
		},
		{
			name:  "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ",
			seats: []int{1, 0, 0, 0, 0, 0},
			want:  5,
		},
		{
			name:  "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ - 2 –º–µ—Å—Ç–∞",
			seats: []int{1, 0},
			want:  1,
		},
		{
			name:  "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ - 2 –º–µ—Å—Ç–∞, –ø—É—Å—Ç–æ–µ –Ω–∞—á–∞–ª–æ",
			seats: []int{0, 1},
			want:  1,
		},
		{
			name:  "–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã",
			seats: []int{1, 1, 1, 1},
			want:  0,
		},
		{
			name:  "–ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –º–µ—Å—Ç–∞",
			seats: []int{1, 0, 1, 0, 1},
			want:  1,
		},
		{
			name:  "–°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π",
			seats: []int{0, 1, 0, 0, 0, 0, 0, 1, 0},
			want:  3,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := MaxDistToClosest(tt.seats); got != tt.want {
				t.Errorf("maxDistToClosest() = %v, want %v", got, tt.want)
			}
		})
	}
}

func MaxDistToClosest(seats []int) int {
	n := len(seats)
	maxDist := 0
	lastPerson := -1

	for i := 0; i < n; i++ {
		if seats[i] == 1 {
			if lastPerson == -1 {
				// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
				maxDist = i
			} else {
				// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ª—é–¥—å–º–∏ (—Å–µ—Ä–µ–¥–∏–Ω–∞)
				maxDist = max(maxDist, (i-lastPerson)/2)
			}

			lastPerson = i
		}
	}

	// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞
	return max(maxDist, n-1-lastPerson)
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
