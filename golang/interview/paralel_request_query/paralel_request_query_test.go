package interview

import (
	"fmt"
	"net/http"
	"sync"
)

// Задачка на знание горутин из Авито
// Параллельный запрос url адресов
// Написать код, который будет выводить коды ответов на HTTP-запросы по двум URL адресам (например главная страница Google и главная страница Avito)
// Запросы должны осуществляться параллельно.
//
// Что проверяется
// - Базовое знание горутин.
// - Знание примитивов синхронизации
// - Понимание работы context
// - Паттерны межсервисного взаимодействия
//
// Дополнительные вопросы
// - Шедулинг горутин, преимущества горутин (что такое горутины в Go и как они соотносятся с потоками операционной системы)
// - А если URL адресов будет 500 и запустить запросы по ним в 500 горутинах, будут и все они выполняться одновременно? Как это устроено “под капотом”?
// - Как изменить этот код чтобы можно было передавать любое количество URL адресов?
// - Как изменить этот код чтобы максимальное время его выполнения было 2 секунды?

func main() {
	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
		defer wg.Done()
		resp, err := http.Get("https://google.com")
		if err != nil {
			fmt.Println(err)
			return
		}

		fmt.Printf("Google status: %s\n", resp.Status)
	}()

	go func() {
		defer wg.Done()
		resp, err := http.Get("https://avito.ru")
		if err != nil {
			fmt.Println(err)
			return
		}

		fmt.Printf("Avito status: %s\n", resp.Status)
	}()

	wg.Wait()
}
