package leetcode

import (
	"fmt"
	"sort"
	"strconv"
	"strings"
	"testing"
)

// ---------------------- MAIN TESTS ----------------------
func TestMain2(t *testing.T) {
	fmt.Println("‚úÖ 1.  Two Sum:", twoSum([]int{2, 7, 11, 15}, 9))                                                        // [0,1]
	fmt.Println("‚úÖ 2.  Add Two Numbers:", addTwoNumbers(buildList([]int{2, 4, 3}), buildList([]int{5, 6, 4})).toSlice()) // [7,0,8]
	fmt.Println("‚úÖ 3.  Longest Substring:", lengthOfLongestSubstring("abcabcbb"))                                        // 3
	fmt.Println("‚úÖ 4.  Valid Palindrome:", isPalindrome("ascsa"))                                                        // true
	fmt.Println("‚úÖ 5.  Longest Palindrome:", longestPalindrome("babad"))                                                 // "bab" –∏–ª–∏ "aba"
	fmt.Println("‚úÖ 6.  Container With Most Water:", maxArea([]int{1, 8, 6, 2, 5, 4, 8, 3, 7}))                           // 49
	fmt.Println("‚úÖ 7.  Revers Linked List:",
		nodeStringify(reverseLinkedList(&ListNode{Val: 1, Next: &ListNode{Val: 2, Next: &ListNode{Val: 3}}}))) // 321
	fmt.Println("‚úÖ 8.  Valid Parentheses:", isValidParentheses("()[]{}"))                                                         // true
	fmt.Println("‚úÖ 9.  String Compression:", StringCompression([]byte("aaabb")))                                                  // a3b2
	fmt.Println("‚úÖ 10. Maximum Subarray:", maxSubArray([]int{-2, 1, -3, 4, -1, 2, 1, -5, 4}))                                     // 6
	fmt.Println("‚úÖ 11. Valid Mountain Array (–ì–æ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤):", validMountainArray([]int{0, 3, 2, 1}))                             // true
	fmt.Println("‚úÖ 12. Remove Duplicates from Sorted Array:", removeDuplicates([]int{1, 1, 2}))                                   // 2
	fmt.Println("‚úÖ 13. Plus One (–ü–ª—é—Å –æ–¥–∏–Ω):", plusOne([]int{9, 9, 9}))                                                           // 1 0 0 0
	fmt.Println("‚úÖ 14. Valid Anagram (–ê–Ω–∞–≥—Ä–∞–º–º–∞):", isAnagram("anagram", "nagaram"))                                              // true
	fmt.Println("‚úÖ 15. Word Pattern (–®–∞–±–ª–æ–Ω —Å–ª–æ–≤):", wordPattern("abba", "dog cat cat dog"))                                      // true
	fmt.Println("‚úÖ 16. Merge Intervals (–°–ª–∏—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤):", mergeIntervals([][]int{{1, 3}, {2, 6}, {8, 10}, {15, 18}}))        // [[1 6] [8 10] [15 18]]
	fmt.Println("‚úÖ 17. Find the Distance Value Between Two Arrays:", findTheDistanceValue([]int{4, 5, 8}, []int{10, 9, 1, 8}, 2)) // 2
	fmt.Println("‚úÖ 18. C–≤–µ—Ä—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:", mergeSlice2String([]int{1, 4, 5, 2, 3, 9, 8, 11, 0, 13}))                    // "0-5,8-9,11,13"
}

// ---------------------- 1. Two Sum (–î–≤–µ —Å—É–º–º—ã) ----------------------
// üìå https://leetcode.com/problems/two-sum/
// üìù –î–∞–Ω –º–∞—Å—Å–∏–≤ –∏ target, –Ω–∞–π—Ç–∏ –¥–≤–∞ –∏–Ω–¥–µ–∫—Å–∞ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç target.
// ‚è∞ O(n) ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ —Å hash-map.
// üíæ O(n) ‚Äî —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ hash-map.
// üîë –ò–¥–µ—è: –∏—Å–∫–∞—Ç—å "–∫–æ–º–ø–ª–µ–º–µ–Ω—Ç" target - nums[i] –≤ map.
func twoSum(nums []int, target int) []int {
	match := make(map[int]int)

	for idx, num := range nums {
		if i, ok := match[target-num]; ok {
			return []int{i, idx}
		}

		match[num] = idx
	}

	return nil
}

// ---------------------- 2. Add Two Numbers (–°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞) ----------------------
// üìå https://leetcode.com/problems/add-two-numbers/
// üìù –î–∞–Ω—ã 2 —á–∏—Å–ª–∞ –≤ –≤–∏–¥–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤, –≤–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É –∫–∞–∫ —Å–ø–∏—Å–æ–∫.
// ‚è∞ O(max(m,n)) ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º –æ–±–∞ —Å–ø–∏—Å–∫–∞.
// üíæ O(1) ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
// üîë –ò–¥–µ—è: —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ—Ä–∞–∑—Ä—è–¥–Ω–æ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º.
// carry - –Ω–µ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ø–æ–Ω–µ—Å—Ç–∏ –≤—ã–Ω–µ—Å—Ç–∏
// dummy - –º–∞–Ω–µ–∫–µ–Ω
func addTwoNumbers(l1, l2 *ListNode) *ListNode {
	head := &ListNode{} // —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –≥–æ–ª–æ–≤–∞
	carry := 0          // –ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–∏ —Å–ª–æ–∂–µ–Ω–∏–∏

	for curr := head; l1 != nil || l2 != nil || carry > 0; curr = curr.Next {
		if l1 != nil {
			carry += l1.Val
			l1 = l1.Next
		}

		if l2 != nil {
			carry += l2.Val
			l2 = l2.Next
		}

		curr.Next = &ListNode{Val: carry % 10}
		carry /= 10
	}

	return head.Next
}

// ---------------------- 3. Longest Substring Without Repeating Characters (–î–ª–∏–Ω–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤) ----------------------
// üìå https://leetcode.com/problems/longest-substring-without-repeating-characters/
// üìù –ù–∞–π—Ç–∏ –¥–ª–∏–Ω—É –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.
// ‚è∞ O(n) ‚Äî —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ.
// üíæ O(k) ‚Äî k —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
// üîë –ò–¥–µ—è: —Ä–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –∏ –¥–≤–∏–≥–∞–µ–º –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ.
func lengthOfLongestSubstring(str string) (maxLen int) {
	match := make(map[rune]int)
	left := 0

	for right, ch := range str {
		if idx, found := match[ch]; found {
			left = max(left, idx+1)
		}

		match[ch] = right
		maxLen = max(maxLen, right-left+1)
	}

	return
}

// ---------------------- 4. Valid Palindrome (–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞) ----------------------
// üìå https://leetcode.com/problems/valid-palindrome/
// üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Ä–µ–≥–∏—Å—Ç—Ä –∏ –Ω–µ–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã).
// ‚è∞ O(n) ‚Äî –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è.
// üíæ O(1).
// üîë –ò–¥–µ—è: –∏–¥—ë–º —Å –¥–≤—É—Ö –∫–æ–Ω—Ü–æ–≤, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.
func isPalindrome2(s string) bool {
	for i, j := 0, len(s)-1; i < j; i++ {
		if s[i] != s[j] {
			return false
		}
		j--
	}

	return true
}

func isPalindrome(s string) bool {
	l, r := 0, len(s)-1

	isAlphaNum := func(ch byte) bool {
		return (ch >= 'a' && ch <= 'z') ||
			(ch >= 'A' && ch <= 'Z') ||
			(ch >= '0' && ch <= '9')
	}

	for l < r {
		for l < r && !isAlphaNum(s[l]) {
			l++
		}
		for l < r && !isAlphaNum(s[r]) {
			r--
		}
		if strings.ToLower(string(s[l])) != strings.ToLower(string(s[r])) {
			return false
		}
		l++
		r--
	}
	return true
}

// ---------------------- 5. Longest Palindromic Substring (–î–ª–∏–Ω–Ω–µ–π—à–∞—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞) ----------------------
// üìå https://leetcode.com/problems/longest-palindromic-substring/
// üìù –ù–∞–π—Ç–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É.
// ‚è∞ O(n^2) ‚Äî —Ä–∞—Å—à–∏—Ä—è–µ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.
// üíæ O(1) ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã.
// üîë –ò–¥–µ—è: –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É.
func longestPalindrome(str string) string {
	start, maxLen := 0, 0
	expand := func(l, r int) {
		for l >= 0 && r < len(str) && str[l] == str[r] {
			if r-l+1 > maxLen {
				start, maxLen = l, r-l+1
			}

			l--
			r++
		}
	}

	for idx := range str {
		expand(idx, idx)   // –Ω–µ—á–µ—Ç–Ω—ã–π –ø–∞–ª–∏–¥—Ä–æ–º
		expand(idx, idx+1) // —á–µ—Ç–Ω—ã–π –ø–∞–ª–∏–¥—Ä–æ–º
	}

	return str[start : start+maxLen]
}

// ---------------------- 6. Container With Most Water (–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—â–∞–¥—å—é) ----------------------
// üìå https://leetcode.com/problems/container-with-most-water/
// üìù –ù–∞–π—Ç–∏ 2 –ª–∏–Ω–∏–∏, –æ–±—Ä–∞–∑—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–æ–¥–æ–π.
// ‚è∞ O(n) ‚Äî –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è.
// üíæ O(1) ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
// üîë –ò–¥–µ—è: –¥–≤–∏–≥–∞—Ç—å –º–µ–Ω—å—à—É—é –≤—ã—Å–æ—Ç—É.
// Input: height = [1,8,6,2,5,4,8,3,7]
// Output: 49
func maxArea(height []int) (res int) {
	l, r := 0, len(height)-1

	for l < r {
		h := min(height[l], height[r])
		res = max(res, h*(r-l))

		if height[l] < height[r] {
			l++
		} else {
			r--
		}
	}

	return
}

// ---------------------- 7. Reverse Linked List (–†–∞–∑–≤–æ—Ä–æ—Ç —Å–ø–∏—Å–∫–∞) ----------------------
// üìå https://leetcode.com/problems/reverse-linked-list/
// üìù –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.
// ‚è∞ O(n).
// üíæ O(1).
// üîë –ò–¥–µ—è: –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏.
func reverseLinkedList(head *ListNode) (out *ListNode) {
	for head != nil {
		tmp := head.Next
		head.Next = out
		out = head
		head = tmp
	}
	return
}

// ---------------------- 8. Valid Parentheses (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–æ–±–∫–∏) ----------------------
// üìå https://leetcode.com/problems/valid-parentheses/
// üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∫–æ–±–∫–∏.
// ‚è∞ O(n) ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥.
// üíæ O(n) ‚Äî —Å—Ç–µ–∫.
// üîë –ò–¥–µ—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–µ–∫ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫.
// "()[]{}","(]","([])","([)]"
func isValidParentheses(str string) bool {
	cls := map[rune]rune{
		')': '(',
		'}': '{',
		']': '[',
	}

	stack := make([]rune, 0, len(str))

	for _, ch := range str {
		switch ch {
		case '{', '(', '[':
			stack = append(stack, ch)
			continue
		}

		if cls[ch] != stack[len(stack)-1] {
			return false
		}

		stack = stack[:len(stack)-1]
	}

	return len(stack) == 0
}

// ---------------------- 9. String Compression (–°–∂–∞—Ç–∏–µ —Å—Ç—Ä–æ–∫–∏) ----------------------
// üìå https://leetcode.com/problems/string-compression/
// üìù –°–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–∞–≤–∏–ª—É: "aaabb" -> "a3b2". –í–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—É—é –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤.
// ‚è∞ O(n).
// üíæ O(1).
// üîë –ò–¥–µ—è: –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è ‚Äî –æ–¥–∏–Ω —á–∏—Ç–∞–µ—Ç, –¥—Ä—É–≥–æ–π –ø–∏—à–µ—Ç.
func StringCompression(chars []byte) int {
	write, read := 0, 0
	for read < len(chars) {
		ch := chars[read]
		count := 0
		for read < len(chars) && chars[read] == ch {
			read++
			count++
		}
		chars[write] = ch
		write++
		if count > 1 {
			for _, c := range []byte(strconv.Itoa(count)) {
				chars[write] = c
				write++
			}
		}
	}
	return write
}

// ---------------------- 10. Maximum Subarray (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞) ----------------------
// üìå https://leetcode.com/problems/maximum-subarray/
// üìù –ù–∞–π—Ç–∏ –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π.
// ‚è∞ O(n) ‚Äî –∞–ª–≥–æ—Ä–∏—Ç–º –ö–∞–¥–∞–Ω–µ.
// üíæ O(1) ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
// üîë –ò–¥–µ—è: dp[i] = max(nums[i], nums[i]+dp[i-1]).
func maxSubArray(nums []int) (sum int) {
	sum, cur := nums[0], nums[0]

	for _, num := range nums[1:] {
		cur = max(num, cur+num)
		sum = max(sum, cur)
	}

	return
}

// ---------------------- 11. Valid Mountain Array (–ì–æ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤) ----------------------
// üìå https://leetcode.com/problems/valid-mountain-array/
// üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–∞—Å—Å–∏–≤: —Å—Ç—Ä–æ–≥–æ –≤–≤–µ—Ä—Ö –¥–æ –ø–∏–∫–∞, –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–≥–æ –≤–Ω–∏–∑; –ø–∏–∫ –Ω–µ –ø–µ—Ä–≤—ã–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π.
// ‚è∞ O(n).
// üíæ O(1).
// üîë –ò–¥–µ—è: –ø—Ä–æ–π—Ç–∏ –≤–≤–µ—Ä—Ö, –∑–∞—Ç–µ–º –≤–Ω–∏–∑ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–æ—à–ª–∏ –æ–±–µ —Ñ–∞–∑—ã.
func validMountainArray(arr []int) bool {
	if len(arr) < 3 {
		return false
	}

	l, r := 0, len(arr)-1

	for l < r {
		if arr[l] < arr[l+1] {
			l++
		} else if arr[r-1] > arr[r] {
			r--
		} else {
			break
		}
	}

	return l > 0 && r < len(arr)-1 && l == r
}

// ---------------------- 12. Remove Duplicates from Sorted Array ------------------------
// üìå https://leetcode.com/problems/remove-duplicates-from-sorted-array/
// üìù –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ, –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—É—é –¥–ª–∏–Ω—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏.
// ‚è∞ O(n).
// üíæ O(1).
// üîë –ò–¥–µ—è: –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (write —á–∏—Ç–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ).
func removeDuplicates(nums []int) (i int) {
	for _, num := range nums {
		if num != nums[i] {
			i++
			nums[i] = num
		}
	}

	return i + 1
}

// ---------------------- 13. Plus One (–ü–ª—é—Å –æ–¥–∏–Ω) --------------------------------------
// üìå https://leetcode.com/problems/plus-one/
// üìù –ü—Ä–∏–±–∞–≤–∏—Ç—å 1 –∫ —á–∏—Å–ª—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –º–∞—Å—Å–∏–≤–æ–º —Ü–∏—Ñ—Ä.
// ‚è∞ O(n).
// üíæ O(1) (–±–µ–∑ —É—á—ë—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞).
// üîë –ò–¥–µ—è: –∏–¥—Ç–∏ —Å –∫–æ–Ω—Ü–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏ÃÅ–º –ø–µ—Ä–µ–Ω–æ—Å.
func plusOne(digits []int) []int {
	carry := 1

	for i := len(digits) - 1; i >= 0; i-- {
		carry += digits[i]
		digits[i] = carry % 10
		carry /= 10
	}

	if carry > 0 {
		digits = append([]int{carry}, digits...)
	}

	return digits
}

// ---------------------- 14. Valid Anagram (–ê–Ω–∞–≥—Ä–∞–º–º–∞) ---------------------------------
// üìå https://leetcode.com/problems/valid-anagram/
// üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ t –∞–Ω–∞–≥—Ä–∞–º–º–æ–π s.
// ‚è∞ O(n).
// üíæ O(1)/O(k) ‚Äî k —Ä–∞–∑–º–µ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞.
// üîë –ò–¥–µ—è: —Å—á—ë—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤. 26 —Å–∏–º–≤–æ–ª–æ–≤
// Input: s = "anagram", t = "nagaram" Output: true
// Input: s = "rat",     t = "car"     Output: false
func isAnagram(s, t string) bool {
	if len(s) != len(t) {
		return false
	}

	chars := make([]int, 26)

	for i := range s {
		chars[s[i]-'a']++
		chars[t[i]-'a']--
	}

	for i := range chars {
		if chars[i] != 0 {
			return false
		}
	}

	return true
}

// ---------------------- 15. Word Pattern (–®–∞–±–ª–æ–Ω —Å–ª–æ–≤) --------------------------------
// üìå https://leetcode.com/problems/word-pattern/
// üìù –°–∏–º–≤–æ–ª —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–≤—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
// ‚è∞ O(n).
// üíæ O(k) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤/—Å–ª–æ–≤.
// üîë –ò–¥–µ—è: –¥–≤–µ –º–∞–ø—ã: char->word –∏ word->char.
func wordPattern(pattern string, s string) bool {
	words := strings.Fields(s)
	if len(words) != len(pattern) {
		return false
	}

	p2w := map[rune]string{}
	w2p := map[string]rune{}

	for idx, ch := range pattern {
		if word, ok := p2w[ch]; ok && (word != words[idx] || w2p[words[idx]] != ch) {
			return false
		}

		w2p[words[idx]] = ch
		p2w[ch] = words[idx]
	}

	return true
}

// ---------------------- 16. Merge Intervals (–°–ª–∏—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤) ----------------------
// üìå https://leetcode.com/problems/merge-intervals/
// üìù –°–ª–∏—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –æ–¥–∏–Ω, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å
// ‚è∞ O(n log n) ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.
// üíæ O(n). ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
// üîë –ò–¥–µ—è: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞—á–∞–ª—É, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
func mergeIntervals(intervals [][]int) (arr [][]int) {
	sort.Slice(intervals, func(i, j int) bool {
		return intervals[i][0] < intervals[j][0]
	})

	arr = append(arr, intervals[0])
	for _, item := range intervals[1:] {
		if item[0] > arr[len(arr)-1][1] {
			arr = append(arr, item)
			continue
		}

		if item[1] > arr[len(arr)-1][1] {
			arr[len(arr)-1][1] = item[1]
		}
	}

	return
}

// ---------------------- 17. Find the Distance Value Between Two Arrays -----------------
// üìå https://leetcode.com/problems/find-the-distance-value-between-two-arrays/
// üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ arr1, —É –∫–æ—Ç–æ—Ä—ã—Ö |x - y| > d –¥–ª—è –≤—Å–µ—Ö y –∏–∑ arr2.
// ‚è∞ O(n log m) ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ–º arr2 –∏ –±–∏–Ω–ø–æ–∏—Å–∫.
// üíæ O(1) –¥–æ–ø.–ø–∞–º—è—Ç–∏ (–Ω–µ —Å—á–∏—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏).
// üîë –ò–¥–µ—è: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ x –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –≤ arr2 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.
func findTheDistanceValue(arr1 []int, arr2 []int, d int) (count int) {
	// sort.Ints(arr2)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
	for _, num1 := range arr1 {
		valid := true
		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ arr1 –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ arr2
		for _, num2 := range arr2 {
			// –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ <= d, —Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é
			if abs(num1-num2) <= d {
				valid = false
				break // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ num1
			}
		}
		// –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ arr2 –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ —á–µ–º d, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
		if valid {
			count++
		}
	}

	return
}

// ---------------------- 18. C–≤–µ—Ä—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
// üìå
// üìù–î–∞–Ω –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç.
// üìù–ù—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É, —Å–≤–æ—Ä–∞—á–∏–≤–∞—è —Å–æ—Å–µ–¥–Ω–∏–µ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ä—è–¥—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã.
// ‚è∞ O(n log n) ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.
// üíæ O(n).
// üîë –ò–¥–µ—è: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞—á–∞–ª—É, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å—Ç—Ä–æ–∫—É
// Input:  [1,4,5,2,3,9,8,11,0,13]
// Output: "0-5,8-9,11,13"
func mergeSlice2String(nums []int) string {
	if len(nums) == 0 {
		return ""
	}

	sort.Ints(nums)

	var builder strings.Builder
	builder.WriteString(strconv.Itoa(nums[0]))

	start := 0
	for i, num := range nums[1:] {
		if num-1 == nums[i] {
			continue
		}

		if i-start > 0 {
			builder.WriteString("-")
			builder.WriteString(strconv.Itoa(nums[i]))
		}

		builder.WriteString(",")
		builder.WriteString(strconv.Itoa(num))

		start = i + 1
	}

	return builder.String()
}
